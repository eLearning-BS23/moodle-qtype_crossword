{"version":3,"sources":["../src/crossword.js"],"names":["define","$","setup","puzzlewords","crosswordclues","areWeInGodMode","areWeRandomizingAcrossDownChoices","showCrossWordOptions","click","solvefunction","val","hide","html","word","attr","acrosstext","show","children","length","datax","datay","across","focus","closesolvefunction","answerfunction","answer","toLowerCase","x","parseInt","y","i","newheight","letterposition","text","newwidth","addClass","is","revealanswerfunction","showCrossWordLists","wordlists","clues","fildnames","acrosslist","downlist","acrosslistordered","fillInCrossWordNumbers","downlistordered","acrosslistorderedelement","getViewableCrossWordList","downlistorderedelement","append","listitems","numbers","Object","keys","element","number","wordinfo","coordinates","fildname","replace","blockitems","blockitemsordered","orderedlist","listnumber","listitem","blockingitemnumber","getBlockingItemNumber","fillnumber","parentelement","prepend","blockitem","blockcoordinates","getBlockItemNumberPosition","items","itemkeys","itemkey","itemword","showCrossWordPuzzle","matrix","widestline","getWidestLine","tallestline","getTallestLine","table","tablerow","j","cellclass","buildCrosswordLists","matrixpositions","matrixposition","positions","primaryelement","push","buildCrosswordList","list","matrixpositionwords","matrixpositionword","buildCrosswordBlockGraphs","graphs","firstgraph","shift","fullmatrix","fullmatrixpositions","graph","buildvertically","checkToBuildVertically","built","possiblefullmatrixsolution","possiblefullmatrixcoordinates","shortestlinelength","trimmedfullmatrixline","rtrim","solutioncoordinates","newerpossiblefullmatrixsolution","joinHorizontalMatrices","getThinnestLine","canmutate","leftpushback","newestpossiblefullmatrixsolution","toppushback","interpolateMatrixPositions","oldlength","fullmatrixbottom","smallmatrixtop","nonConflictingRows","joinVerticalMatrices","incrementMatrixHorizontally","viewPuzzle","compactCrosswordBlockSource","fullgraph","matrixpositioncoordinates","puzzle","string","originalfullmatrix","slice","line","insertLetterAtStringPosition","bigmatrix","smallmatrix","height","toprow","bottomrow","rowtocheck","altrowtocheck","randomTrueFalse","Math","random","widestlength","row","thinnestlength","buildCrosswordBlocks","crosswordblocks","hasOwnProperty","subwords","longestwordlength","getLongestWordLength","subwordentry","subword","subletter","matchingposition","findMatchingLetterMatrixPosition","matchingoffset","findMatchingOffset","setLetterMatrixVertically","fillLetterMatrixVertically","findMatchingLetterMatrixPositionVertical","setLetterMatrixHorizontally","buildUnassignedCrosswordBlock","unmatchedcrosswords","unmatchedcrossword","letter","position","substr","letters","index","spacing","Array","join","words","wordlength","compactCrosswordBlockSources","compactCrosswordBlockBottom","compactCrosswordBlockTop","compactCrosswordBlockLeft","compactCrosswordBlockRight","crosswordblock","crosswordblocksolutions","crosswordblockacross","crosswordblocklength","trimmedrow","trim","splice","incrementCrossWordBlockHeights","crosswordblockwords","crosswordblockword","incrementCrossWordBlockLengths","shorten","crosswordrow","longestpiece","generateCrosswordBlockSources","shuffledwords","checkedcrosswords","shuffledword","clue","checkedcrosswordkey","unmatchedwords","wordletters","getLettersHashCountForWord","nextshuffledword","nextword","nextclue","nextcrosswordkey","matchingletter","getMatchingLetter","lettershash","wordcount","crosswords","JSON","parse"],"mappings":"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","sourcesContent":["define(['jquery'], function($) {\n        return {\n            setup: function(puzzlewords) {\n                // Author: HoldOffHunger\n                // License: BSD 3-Clause\n\n                // Set Globals\n                // --------------------------------------------\n\n                var crosswordclues = [];\n\n                // Set Randomization Configs\n                // --------------------------------------------\n\n                /* areWeInGodMode()\n                *   Turn on to show the crossword puzzle completed, which makes debugging and coding much easier.\n                *   @access foo\n                */\n\n                function areWeInGodMode() {\n                    return false;\n                }\n\n\n\n                /*\n                *   areWeRandomizingAcrossDownChoices()\n                *   On/off switch for determining if we are randomizing\n                *   \"spine\" words from being either across or down.\n                */\n\n                function areWeRandomizingAcrossDownChoices() {\n                    return true;\n                }\n\n\n                // Main()\n                // --------------------------------------------\n\n                /*\n                *   crosswordPuzzle(puzzlewords)\n                *   Main function that receives the list of\n                *   puzzlewords and then displays the crossword puzzle itself.\n                */\n\n                function crosswordPuzzle(puzzlewords) {\n                    var wordcount = puzzlewords.length;\n\n                    if (!puzzlewords || !wordcount) {\n                        return false;\n                    }\n                    var crosswords = generateCrosswordBlockSources(puzzlewords);\n                    var crosswordblocks = crosswords['blocks'];\n                    var crosswordclues = crosswords['clues'];\n                    var fildnames = crosswords['fildnames'];\n                    var graphs = buildCrosswordBlocks(crosswordblocks);\n                    graphs = compactCrosswordBlockSources(graphs);\n                    if (!graphs || !graphs.length) {\n                        return false;\n                    }\n                    var fullgraph = buildCrosswordBlockGraphs(graphs);\n                    var wordlists = buildCrosswordLists(fullgraph['matrixpositions']);\n                    showCrossWordPuzzle(fullgraph['matrix']);\n                    showCrossWordLists(wordlists, crosswordclues, fildnames);\n                    showCrossWordOptions();\n                    return true;\n                }\n\n                // User Form Actions\n                // --------------------------------------------\n\n                /*\n                *   showCrossWordOptions()\n                *   Show the crossword puzzle and the lists.\n                */\n\n                function showCrossWordOptions() {\n                    /*\n                    *   solvefunction()\n                    *   User clicked the \"solve\" button for a phrase\n                    *   on the across or down list. Provide a prompt for solving the clue.\n                    */\n                    var solvefunction = function () {\n                        $('#solution-answer').val('');\n                        $('#answer-results').hide();\n                        $('#answer-results').html('');\n\n                        var word = $(this).attr('data-word');\n                        var acrosstext = $(this).attr('data-across') == 'false' ? 'Down' : 'Across';\n                        $('#position-and-clue').html('<b>' + acrosstext + '</b> : ' + $(this).attr('data-clue'));\n                        $('#answer-form').show();\n\n                        if ($(this).children('span').attr('data-solved')) {\n                            $('#answer-button').attr('disabled', true);\n                            // $('#reveal-answer-button').attr('disabled', true);\n\n                            $('#answer-results').show();\n                            $('#answer-results').html('You have already solved this problem.');\n\n                            $('#solution-answer').val(word);\n                        } else {\n                            $('#solution-answer').attr('maxlength', word.length);\n\n                            $('#answer-button').attr('data-word', word);\n                            // $('#reveal-answer-button').attr('data-word', word);\n\n                            var datax = $(this).attr('data-x');\n\n                            $('#answer-button').attr('data-x', datax);\n                            // $('#reveal-answer-button').attr('data-x', datax);\n\n                            var datay = $(this).attr('data-y');\n\n                            $('#answer-button').attr('data-y', datay);\n                            // $('#reveal-answer-button').attr('data-y', datay);\n\n                            var across = $(this).attr('data-across');\n\n                            $('#answer-button').attr('data-across', across);\n                            // $('#reveal-answer-button').attr('data-across', across);\n\n                            $('#solution-answer').focus();\n\n                            $('#answer-button').attr('disabled', false);\n                            // $('#reveal-answer-button').attr('disabled', false);\n                        }\n\n                        return false;\n                    };\n\n                    /*\n                    *   closesolvefunction()\n                    *   User clicked \"close\" on the \"solve phrase\"\n                    *   dialogue that was brought up by solvefunction().\n                    */\n                    var closesolvefunction = function () {\n                        $('#answer-results').hide();\n                        $('#answer-form').hide();\n                        return false;\n                    };\n                    /*\n                    *   answerfunction()\n                    *   User clicked \"answer\" on the \"solve phrase\"\n                    *   dialogue that was brought up by solvefunction().\n                    */\n                    var answerfunction = function () {\n                        var word = $(this).attr('data-word');\n                        var answer = $('#solution-answer').val().toLowerCase();\n\n                        if (answer == word) {\n                            var across = $(this).attr('data-across');\n\n                            var x = parseInt($(this).attr('data-x'), 10);\n                            var y = parseInt($(this).attr('data-y'), 10);\n\n                            if (across && across != 'false') {\n                                for (var i = 0; i < answer.length; i++) {\n                                    var newheight = y + i;\n                                    var letterposition = 'letter-position-' + x + '-' + newheight;\n                                    $('#' + letterposition).text(answer[i]);\n                                }\n                            } else {\n                                for (var i = 0; i < answer.length; i++) {\n                                    var newwidth = x + i;\n                                    var letterposition = 'letter-position-' + newwidth + '-' + y;\n                                    $('#' + letterposition).text(answer[i]);\n                                }\n                            }\n\n                            $('#' + word + '-listing').addClass('strikeout');\n                            $('#' + word + '-listing').attr('data-solved', true);\n\n                            $('#answer-form').hide();\n                        } else {\n                            if (!$('#answer-results').is(':visible')) {\n                                $('#answer-results').show();\n                                $('#answer-results').html('Incorrect Answer, Please Try Again');\n                            }\n                        }\n\n                        return false;\n                    };\n\n                    /*\n                    *   revealanswerfunction()\n                    *   User clicked \"reveal answer\" on the \"solve phrase\"\n                    *   dialogue that was brought up by solvefunction().\n                    */\n\n                    var revealanswerfunction = function () {\n                        var word = $(this).attr('data-word');\n                        var across = $(this).attr('data-across');\n\n                        var x = parseInt($(this).attr('data-x'), 10);\n                        var y = parseInt($(this).attr('data-y'), 10);\n\n                        if (across && across != 'false') {\n                            for (var i = 0; i < word.length; i++) {\n                                var newheight = y + i;\n                                var letterposition = 'letter-position-' + x + '-' + newheight;\n                                $('#' + letterposition).text(word[i]);\n                            }\n                        } else {\n                            for (var i = 0; i < word.length; i++) {\n                                var newwidth = x + i;\n                                var letterposition = 'letter-position-' + newwidth + '-' + y;\n                                $('#' + letterposition).text(word[i]);\n                            }\n                        }\n\n                        $('#' + word + '-listing').addClass('red-strikeout');\n                        $('#' + word + '-listing').attr('data-solved', true);\n\n                        $('#answer-form').hide();\n                    };\n\n                    $('.word-clue').click(solvefunction);\n                    $('#cancel-button').click(closesolvefunction);\n                    $('#answer-button').click(answerfunction);\n                    $('#reveal-answer-button').click(revealanswerfunction);\n                }\n\n                // Show Crossword Lists\n                // --------------------------------------------\n\n                /*\n                *   showCrossWordLists(wordlists, clues)\n                *   Fill in the numbers for the crossword puzzle and\n                *   then display the lists of words associated with those numbers.\n                */\n\n                function showCrossWordLists(wordlists, clues, fildnames) {\n                    var acrosslist = wordlists['across'];\n                    var downlist = wordlists['down'];\n                    var acrosslistordered = fillInCrossWordNumbers(acrosslist);\n                    var downlistordered = fillInCrossWordNumbers(downlist, acrosslist, acrosslistordered);\n                    var acrosslistorderedelement = getViewableCrossWordList(acrosslistordered, clues, true, fildnames);\n                    var downlistorderedelement = getViewableCrossWordList(downlistordered, clues, false, fildnames);\n                    $('#left-list').append(acrosslistorderedelement);\n                    $('#right-list').append(downlistorderedelement);\n                }\n\n                /*\n                *   getViewableCrossWordList(listitems, clues, across)\n                *   Get a single crossword list, which may be\n                *   used for either across or down lists.\n                */\n\n                function getViewableCrossWordList(listitems, clues, across, fildnames) {\n                    var numbers = Object.keys(listitems);\n                    var element = '<ul>';\n                    for (var i = 0; i < numbers.length; i++) {\n                        var number = numbers[i];\n                        var wordinfo = listitems[number];\n                        var word = wordinfo['word'];\n                        var coordinates = wordinfo['coordinates'];\n                        var fildname = fildnames[word];\n                        element += '<input type=\"hidden\" id=\"' + fildname.replace(/\"/g, '&quot;') ;\n                        element += '\" onblur=\"onBlurFuntion(this.value,' + coordinates[0];\n                        element += ',' + coordinates[1] + ',' + across + ')\"';\n                        element += 'data-x=\"' + coordinates[0] + '\" ';\n                        element += 'data-y=\"' + coordinates[1] + '\" ';\n                        element += 'data-across=\"' + across + '\" ';\n                        element += '>';\n                        element += '</input>';\n                    }\n                    element += '</ul>';\n                    return element;\n                }\n\n                /*\n                *   fillInCrossWordNumbers(listitems, blockitems, blockitemsordered)\n                *   Fill in the numbers in the crossword puzzle boxes that are each\n                *   individually associated with a particular clue from the across or down lists.\n                */\n\n                function fillInCrossWordNumbers(listitems, blockitems, blockitemsordered) {\n                    var orderedlist = [];\n                    var listnumber = 0;\n                    for (var i = 0; i < listitems.length; i++) {\n                        listnumber++;\n                        var listitem = listitems[i];\n                        var word = listitem['word'];\n                        var coordinates = listitem['position'];\n                        var blockingitemnumber = getBlockingItemNumber(coordinates, blockitems, blockitemsordered);\n                        var fillnumber = listnumber;\n                        if (blockingitemnumber) {\n                            fillnumber = blockingitemnumber;\n                        }\n                        var element = '<div class=\"background-text\"><span class=\"crossword-grid-cell-number\">'\n                            + fillnumber + '</span></div>';\n                        var parentelement;\n                        parentelement = $('#cell-position-' + coordinates[0] + '-' + coordinates[1]);\n                        if (parentelement && $(parentelement).attr('id')) {\n                            $(parentelement).prepend(element);\n                        }\n                        orderedlist[listnumber] = {\n                            'word': word,\n                            'coordinates': coordinates,\n                        };\n                    }\n\n                    return orderedlist;\n                }\n\n                /*\n                *   getBlockingItemNumber(coordinates, blockitems, blockitemsordered)\n                *   It is possible for a grid cell to be the start position for one item from\n                *   the across list and one item from the down list. In this case, a \"blocking number\"\n                *   is already assigned to the grid cell. We resolve this by placing the number on\n                *   the opposite side in the cell, so all cells have a number in the top-left corner,\n                *   but this one has a number in the top-left and the top-right.\n                */\n\n                function getBlockingItemNumber(coordinates, blockitems, blockitemsordered) {\n                    if (!blockitems || !blockitems.length || !blockitemsordered || !blockitemsordered.length) {\n                        return false;\n                    }\n                    for (var i = 0; i < blockitems.length; i++) {\n                        var blockitem = blockitems[i];\n\n                        var blockcoordinates = blockitem['position'];\n\n                        if (blockcoordinates[0] == coordinates[0] && blockcoordinates[1] == coordinates[1]) {\n                            return getBlockItemNumberPosition(blockitem['word'], blockitemsordered);\n                        }\n                    }\n                    return false;\n                }\n\n                /*\n                *   getBlockItemNumberPosition(word, items)\n                *   This returns the number position of the blocking item.\n                */\n                function getBlockItemNumberPosition(word, items) {\n                    var itemkeys = Object.keys(items);\n                    for (var i = 0; i < itemkeys.length; i++) {\n                        var itemkey = itemkeys[i];\n                        var itemword = items[itemkey];\n                        if (itemword.word == word) {\n                            return itemkey;\n                        }\n                    }\n                }\n\n                // Show Crossword Puzzle\n                // --------------------------------------------\n\n                /*\n                *   showCrossWordPuzzle(matrix)\n                *   Show the crossword puzzle itself. Only display the answers if we are in god mode.\n                */\n                function showCrossWordPuzzle(matrix) {\n                    var widestline = getWidestLine(matrix);\n                    var tallestline = getTallestLine(matrix);\n                    var table = $('<table class=\"puzzle\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\"></table>');\n                    for (var i = 0; i < tallestline; i++) {\n                        var tablerow = '<tr class=\"letter-row\">';\n                        for (var j = 0; j < widestline; j++) {\n                            var cellclass = 'letter-cell';\n                            if (!matrix[i][j] || matrix[i][j] == ' ') {\n                                cellclass += ' blank-cell';\n                            }\n                            tablerow += '<td id=\"cell-position-' + i + '-' + j + '\" class=\"relative-position ' + cellclass + '\">';\n                            tablerow += '<span class=\"letter-text\" id=\"letter-position-' + i + '-' + j + '\">';\n                            if (areWeInGodMode() && matrix[i][j] && matrix[i][j] != ' ') {\n                                tablerow += matrix[i][j];\n                            }\n                            tablerow += '</span>';\n                            tablerow += '</td>';\n                        }\n                        tablerow += '</tr>';\n                        $(table).append(tablerow);\n                    }\n                    $('#root').append(table);\n                    return true;\n                }\n\n                /*\n                *   buildCrosswordLists(matrixpositions)\n                *   From the crossword puzzle, build the lists of across and down.\n                */\n\n                function buildCrosswordLists(matrixpositions) {\n                    var acrosslist = [];\n                    var downlist = [];\n                    for (var i = 0; i < matrixpositions.length; i++) {\n                        var matrixposition = matrixpositions[i];\n                        var across = matrixposition['across'];\n                        var word = matrixposition['word'];\n                        var positions = matrixposition['matrixpositions'];\n                        var primaryelement = {\n                            'word': word,\n                            'position': positions[word],\n                        };\n                        delete positions[word];\n                        if (across) {\n                            if (word != '(unmatched)') {\n                                acrosslist.push(primaryelement);\n                            }\n                            downlist = buildCrosswordList(downlist, positions);\n                        } else {\n                            if (word != '(unmatched)') {\n                                downlist.push(primaryelement);\n                            }\n                            acrosslist = buildCrosswordList(acrosslist, positions);\n                        }\n                    }\n                    return {\n                        'across': acrosslist,\n                        'down': downlist,\n                    };\n                }\n\n                /*\n                *   buildCrosswordList(list, positions)\n                *   Build a single crossword list, either for across or down.\n                */\n\n                function buildCrosswordList(list, positions) {\n                    var matrixpositionwords = Object.keys(positions);\n                    for (var i = 0; i < matrixpositionwords.length; i++) {\n                        var matrixpositionword = matrixpositionwords[i];\n                        var coordinates = positions[matrixpositionword];\n                        list.push({\n                            'word': matrixpositionword,\n                            'position': coordinates,\n                        });\n                    }\n                    return list;\n                }\n\n                // Build Crossword\n                // --------------------------------------------\n                /*\n                *   buildCrosswordBlockGraphs(graphs)\n                *   Given groups of words, each with a \"spine\" word,\n                *   assemble these into a single crossword puzzle block graph.\n                */\n\n                function buildCrosswordBlockGraphs(graphs) {\n                    var firstgraph = graphs.shift();\n                    var fullmatrix = firstgraph['matrix'];\n                    var fullmatrixpositions = [{\n                        'matrixpositions': firstgraph['matrixpositions'],\n                        'across': firstgraph['across'],\n                        'word': firstgraph['word'],\n                    }];\n                    for (var i = 0; i < graphs.length; i++) {\n                        var graph = graphs[i];\n                        var matrix = graph['matrix'];\n                        var matrixpositions = graph['matrixpositions'];\n                        var across = graph['across'];\n                        var word = graph['word'];\n                        var widestline = getWidestLine(fullmatrix);\n                        var tallestline = getTallestLine(fullmatrix);\n                        var buildvertically = checkToBuildVertically(fullmatrix, matrix, widestline, tallestline);\n                        var built = false;\n                        if (!buildvertically) {\n                            // I AM LEAF!!!.\n                            var possiblefullmatrixsolution = false;\n                            var possiblefullmatrixcoordinates = [];\n                            var shortestlinelength = 99999999;\n                            for (var j = 0; j < fullmatrix.length; j++) {\n                                var trimmedfullmatrixline = rtrim(fullmatrix[j]);\n                                if (trimmedfullmatrixline.length > 0 && trimmedfullmatrixline.length < shortestlinelength) {\n                                    var solutioncoordinates = [trimmedfullmatrixline.length, j + i];\n                                    var newerpossiblefullmatrixsolution =\n                                        joinHorizontalMatrices(fullmatrix, matrix, solutioncoordinates);\n                                    if (newerpossiblefullmatrixsolution) {\n                                        shortestlinelength = getThinnestLine(newerpossiblefullmatrixsolution);\n                                        possiblefullmatrixsolution = newerpossiblefullmatrixsolution;\n                                        possiblefullmatrixcoordinates = solutioncoordinates;\n                                        var canmutate = true;\n                                        var leftpushback = 1;\n                                        while (canmutate && (trimmedfullmatrixline.length - leftpushback) >= 0) {\n                                            solutioncoordinates = [trimmedfullmatrixline.length - leftpushback, j + i];\n                                            var newestpossiblefullmatrixsolution =\n                                                joinHorizontalMatrices(fullmatrix, matrix, solutioncoordinates);\n                                            if (newestpossiblefullmatrixsolution) {\n                                                shortestlinelength = getThinnestLine(newestpossiblefullmatrixsolution);\n                                                possiblefullmatrixsolution = newestpossiblefullmatrixsolution;\n                                                possiblefullmatrixcoordinates = solutioncoordinates;\n                                                leftpushback++;\n                                            } else {\n                                                canmutate = false;\n                                                leftpushback--;\n                                            }\n                                        }\n                                        var toppushback = 1;\n                                        while ((j + i) - toppushback > 0) {\n                                            solutioncoordinates =\n                                                [trimmedfullmatrixline.length - leftpushback, (j + i) - toppushback];\n                                            var newestpossiblefullmatrixsolution =\n                                                joinHorizontalMatrices(fullmatrix, matrix, solutioncoordinates);\n                                            if (newestpossiblefullmatrixsolution) {\n                                                shortestlinelength = getThinnestLine(newestpossiblefullmatrixsolution);\n                                                possiblefullmatrixsolution = newestpossiblefullmatrixsolution;\n                                                possiblefullmatrixcoordinates = solutioncoordinates;\n                                            }\n                                            toppushback++;\n                                        }\n                                        toppushback--;\n                                        canmutate = true;\n                                        var leftpushback = 1;\n                                        while (canmutate &&\n                                            (trimmedfullmatrixline.length - leftpushback)\n                                                >= 0) {\n                                            solutioncoordinates = [\n                                                trimmedfullmatrixline.length - leftpushback,\n                                                j + i - toppushback\n                                            ];\n                                            var newestpossiblefullmatrixsolution =\n                                                joinHorizontalMatrices(fullmatrix, matrix, solutioncoordinates);\n                                            if (newestpossiblefullmatrixsolution) {\n                                                shortestlinelength = getThinnestLine(newestpossiblefullmatrixsolution);\n                                                possiblefullmatrixsolution = newestpossiblefullmatrixsolution;\n                                                possiblefullmatrixcoordinates = solutioncoordinates;\n                                                leftpushback++;\n                                            } else {\n                                                canmutate = false;\n                                                leftpushback--;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            if (possiblefullmatrixsolution) {\n                                fullmatrix = possiblefullmatrixsolution;\n                                matrixpositions =\n                                    interpolateMatrixPositions(\n                                        matrixpositions,\n                                        [possiblefullmatrixcoordinates[1],\n                                            possiblefullmatrixcoordinates[0]]\n                                    );\n                                fullmatrixpositions.push({\n                                    'matrixpositions': matrixpositions,\n                                    'across': across,\n                                    'word': word,\n                                });\n                                built = true;\n                            }\n                        }\n                        if (buildvertically || !built) {\n                            // AND I AM TWIG!!!;\n                            var oldlength = fullmatrix.length;\n                            var fullmatrixbottom = fullmatrix[fullmatrix.length - 1];\n                            for (var j = 0; j < widestline; j++) {\n                                var smallmatrixtop = matrix[0];\n                                if (nonConflictingRows(fullmatrixbottom, smallmatrixtop)) {\n                                    fullmatrix = joinVerticalMatrices(fullmatrix, matrix);\n                                    solutioncoordinates = [oldlength, j];\n                                    matrixpositions =\n                                        interpolateMatrixPositions(matrixpositions, solutioncoordinates);\n                                    fullmatrixpositions.push({\n                                        'matrixpositions': matrixpositions,\n                                        'across': across,\n                                        'word': word,\n                                    });\n                                    j = widestline;\n                                    built = true;\n                                } else {\n                                    matrix = incrementMatrixHorizontally(matrix);\n                                }\n                            }\n                            if (!built) {\n                                viewPuzzle(matrix);\n                                solutioncoordinates = [fullmatrix.length + 1, 0];\n                                matrix = compactCrosswordBlockSource({'matrix': matrix})['matrix'];\n                                fullmatrix.push('');\n                                fullmatrix = joinVerticalMatrices(fullmatrix, matrix);\n                                matrixpositions = interpolateMatrixPositions(matrixpositions, solutioncoordinates);\n                                fullmatrixpositions.push({\n                                    'matrixpositions': matrixpositions,\n                                    'across': across,\n                                    'word': word,\n                                });\n                            }\n                        }\n                        fullmatrix = compactCrosswordBlockSource({'matrix': fullmatrix})['matrix'];\n                    }\n                    var fullgraph = {\n                        'matrix': fullmatrix,\n                        'matrixpositions': fullmatrixpositions,\n                    };\n                    return fullgraph;\n                }\n\n                /* interpolateMatrixPositions(matrixpositions, coordinates, word)\n\n                    Shift the entire matrix of crossword puzzle words by some\n                    coordinates. For example, move each row up by 1 and left by 5,\n                    which would retain the relationship among the words, since they\n                    are all moved by the same amount and in the same directions.\n\n                */\n\n                function interpolateMatrixPositions(matrixpositions, coordinates, word=null) {\n\n                    var matrixpositionwords = Object.keys(matrixpositions);\n\n                    var word= word;\n                    for (var i = 0; i < matrixpositionwords.length; i++) {\n                        var matrixpositionword = matrixpositionwords[i];\n                        var matrixpositioncoordinates = matrixpositions[matrixpositionword];\n                        matrixpositioncoordinates[0] += coordinates[0];\n                        matrixpositioncoordinates[1] += coordinates[1];\n                    }\n\n                    return matrixpositions;\n                }\n\n                /* viewPuzzle(puzzle)\n\n                    Debugging tool to view the puzzle.\n\n                */\n\n                function viewPuzzle(puzzle) {\n                    var puzzle= puzzle;\n                }\n\n                /* rtrim(string)\n\n                    Right-trim a string.\n\n                */\n\n                function rtrim(string) {\n                    if (!string) {\n                        return \"\";\n                    }\n                    return string.replace(/\\s+$/, '');\n                }\n\n                /* joinHorizontalMatrices(fullmatrix, matrix, coordinates)\n\n                    Given two matrices of crossword puzzle graphs, join them horizontally.\n\n                */\n\n                function joinHorizontalMatrices(fullmatrix, matrix, coordinates) {\n                    if (coordinates[0] == 0 || coordinates[1] == 0) {\n                        return false;\n                    }\n                    var originalfullmatrix = fullmatrix;\n\n                    fullmatrix = fullmatrix.slice();\n                    for (var i = 0; i < matrix.length; i++) {\n                        var line = matrix[i];\n\n                        for (var j = 0; j < line.length; j++) {\n                            var x = coordinates[0];\n                            var y = coordinates[1];\n\n                            x += j;\n                            y += i;\n\n                            if (!fullmatrix[y]) {\n                                fullmatrix[y] = \"\";\n                            }\n\n                            if (fullmatrix[y] && fullmatrix[y][x] && fullmatrix[y][x] != ' ' && matrix[i][j] != ' ') {\n                                return false;\n                            } else {\n                                if (matrix[i][j] != ' ') {\n                                    if (\n                                        originalfullmatrix[y - 1]\n                                        && originalfullmatrix[y - 1][x]\n                                        && originalfullmatrix[y - 1][x] != ' '\n                                    ) {\n                                        return false;\n                                    }\n\n                                    if (\n                                        originalfullmatrix[y + 1]\n                                        && originalfullmatrix[y + 1][x]\n                                        && originalfullmatrix[y + 1][x] != ' '\n                                    ) {\n                                        return false;\n                                    }\n\n                                    if (\n                                        originalfullmatrix[y]\n                                        && originalfullmatrix[y][x - 1]\n                                        && originalfullmatrix[y][x - 1] != ' '\n                                    ) {\n                                        return false;\n                                    }\n\n                                    if (\n                                        originalfullmatrix[y]\n                                        && originalfullmatrix[y][x + 1]\n                                        && originalfullmatrix[y][x + 1] != ' '\n                                    ) {\n                                        return false;\n                                    }\n                                }\n                            }\n\n                            while (!fullmatrix[y][x]) {\n                                fullmatrix[y] += ' ';\n                            }\n                            if (matrix[i][j] != ' ') {\n                                fullmatrix[y] = insertLetterAtStringPosition(matrix[i][j], fullmatrix[y], x);\n                            }\n                        }\n                    }\n\n                    return fullmatrix;\n                }\n\n                /* joinVerticalMatrices(bigmatrix, smallmatrix)\n\n                    Given two matrices of crossword puzzle graphs, join them vertically.\n\n                */\n\n                function joinVerticalMatrices(bigmatrix, smallmatrix) {\n                    var height = bigmatrix.length;\n\n                    for (var i = 0; i < smallmatrix.length; i++) {\n                        bigmatrix[height + i] = smallmatrix[i];\n                    }\n\n                    return bigmatrix;\n                }\n\n                /* nonConflictingRows(toprow, bottomrow)\n\n                    Are these two rows without conflicts between each other?\n                    A conflict is when one of the words from one row touch the\n                    words of another row (which breaks the crossword puzzle rule\n                    that only corners and edges may be the origin of a word,\n                    and never the center of the grid block).\n\n                */\n\n                function nonConflictingRows(toprow, bottomrow) {\n                    var rowtocheck;\n\n                    if (toprow[bottomrow.length] && toprow[bottomrow.length] == ' ') {\n                        return false;\n                    }\n\n                    if (toprow.length > bottomrow.length) {\n                        rowtocheck = bottomrow;\n                        var altrowtocheck = toprow;\n                    } else {\n                        rowtocheck = toprow;\n                        var altrowtocheck = bottomrow;\n                    }\n\n                    for (var i = 0; i < rowtocheck.length; i++) {\n                        if (rowtocheck[i] && altrowtocheck[i]) {\n                            if (rowtocheck[i] != ' ' && altrowtocheck[i] != ' ') {\n                                return false;\n                            }\n                        }\n                    }\n\n                    return true;\n                }\n\n                /*\n                *   incrementMatrixHorizontally(matrix)\n                *   Add another blank column to the crossword puzzle grid.\n                */\n\n                function incrementMatrixHorizontally(matrix) {\n                    for (var i = 0; i < matrix.length; i++) {\n                        matrix[i] = ' ' + matrix[i];\n                    }\n\n                    return matrix;\n                }\n\n                /* checkToBuildVertically(matrix, smallmatrix, widestline, tallestline)\n                    Should we build vertically? We should do so if\n                    the crossword puzzle is wider than it is taller,\n                    which will give us the most compact crossword puzzle possibility.\n                */\n\n                function checkToBuildVertically(matrix, smallmatrix, widestline, tallestline) {\n                    if (matrix.length <= smallmatrix.length) {\n                        return true;\n                    } else if (tallestline < widestline) {\n                        return true;\n                    } else if (widestline < tallestline) {\n                        return false;\n                    }\n\n                    return randomTrueFalse();\n                }\n\n                /* randomTrueFalse()\n\n                    Random yes/no generator.\n\n                */\n\n                function randomTrueFalse() {\n                    return Math.random() > 0.5 ? true : false;\n                }\n\n                /* getWidestLine(matrix)\n\n                    Given a matrix, returns the widest line.\n\n                */\n\n                function getWidestLine(matrix) {\n                    var widestlength = 0;\n\n                    for (var i = 0; i < matrix.length; i++) {\n                        var row = matrix[i];\n                        if (row && row.length && row.length > widestlength) {\n                            widestlength = row.length;\n                        }\n                    }\n\n                    return widestlength;\n                }\n\n                /* getThinnestLine(matrix)\n\n                    Given a matrix, returns the thinnest line.\n                    This is the line with the most amount of black space to its right.\n\n                */\n\n                function getThinnestLine(matrix) {\n                    var thinnestlength = 999999;\n\n                    for (var i = 0; i < matrix.length; i++) {\n                        var row = matrix[i];\n                        if (row && row.length < thinnestlength) {\n                            thinnestlength = row.length;\n                        }\n                    }\n\n                    return thinnestlength;\n                }\n\n                /* getTallestLine(matrix)\n\n                    Given a matrix, return the tallest line.\n                    This is the line with the least amount of blank space below it.\n\n                */\n\n                function getTallestLine(matrix) {\n                    return matrix.length;\n                }\n\n                /* buildCrosswordBlocks(crosswordblocks)\n\n                    Build groups of words, each with one spine word.\n\n                */\n\n                function buildCrosswordBlocks(crosswordblocks) {\n                    var graphs = [];\n\n                    for (var word in crosswordblocks) {\n                        if (!crosswordblocks.hasOwnProperty(word) || word == '(unmatched)'){ continue; }\n\n                        var subwords = crosswordblocks[word];\n                        var longestwordlength = getLongestWordLength(subwords);\n\n                        var across = true;\n\n                        if (areWeRandomizingAcrossDownChoices()) {\n                            across = randomTrueFalse();\n                        }\n\n                        var matrix = [];\n                        var matrixpositions = [];\n\n                        if (across) {\n                            matrix[longestwordlength - 1] = word;\n                            matrixpositions[word] = [longestwordlength - 1, 0];\n\n                            for (var i = 0; i < subwords.length; i++) {\n                                var subwordentry = subwords[i];\n\n                                var subword = subwordentry[0];\n                                var subletter = subwordentry[1];\n\n                                var matchingposition =\n                                    findMatchingLetterMatrixPosition(\n                                    matrix, word, subletter, longestwordlength - 2\n                                );\n                                var matchingoffset = findMatchingOffset(subword, subletter);\n                                matrixpositions[subword] = [longestwordlength - matchingoffset - 1, matchingposition];\n                                matrix = setLetterMatrixVertically(\n                                    matrix,\n                                    subword,\n                                    longestwordlength - matchingoffset - 1,\n                                    matchingposition\n                                );\n                            }\n                        } else {\n                            matrix = fillLetterMatrixVertically(matrix, word, longestwordlength + 1, 0);\n                            matrixpositions[word] = [0, longestwordlength];\n\n                            for (var i = 0; i < subwords.length; i++) {\n                                var subwordentry = subwords[i];\n\n                                var subword = subwordentry[0];\n                                var subletter = subwordentry[1];\n                                var matchingposition =\n                                    findMatchingLetterMatrixPositionVertical(\n                                        matrix, word, subletter, longestwordlength - 1\n                                    );\n                                var matchingoffset = findMatchingOffset(subword, subletter);\n                                matrixpositions[subword] =\n                                    [matchingposition, longestwordlength - matchingoffset];\n                                matrix = setLetterMatrixHorizontally(\n                                    matrix,\n                                    subword,\n                                    matchingposition,\n                                    longestwordlength - matchingoffset\n                                );\n                            }\n                        }\n                        var graph = {\n                            'matrix': matrix,\n                            'matrixpositions': matrixpositions,\n                            'across': across,\n                            'word': word,\n                        };\n\n                        graphs.push(graph);\n                    }\n\n                    if (crosswordblocks['(unmatched)']) {\n                        var graph = buildUnassignedCrosswordBlock(crosswordblocks['(unmatched)']);\n                        graphs.push(graph);\n                    }\n\n                    return graphs;\n                }\n\n                /* buildUnassignedCrosswordBlock(unmatchedcrosswords)\n\n                    At the end of making our groups of words with spine words,\n                    we have smoe that could not be matched at all.\n                    Group these together as a block.\n\n                */\n\n                function buildUnassignedCrosswordBlock(unmatchedcrosswords) {\n                    var across = true;\n\n                    if (areWeRandomizingAcrossDownChoices()) {\n                        across = randomTrueFalse();\n                    }\n\n                    var matrix = [];\n                    var matrixpositions = [];\n\n                    if (across) {\n                        for (var i = 0; i < unmatchedcrosswords.length; i++) {\n                            var unmatchedcrossword = unmatchedcrosswords[i];\n                            matrix[i] = unmatchedcrossword;\n                            matrixpositions[unmatchedcrossword] = [0, i];\n                        }\n                    } else {\n                        for (var i = 0; i < unmatchedcrosswords.length; i++) {\n                            var unmatchedcrossword = unmatchedcrosswords[i];\n                            matrix = setLetterMatrixVertically(matrix, unmatchedcrossword, 0, i);\n                            matrixpositions[unmatchedcrossword] = [i, 0];\n                        }\n                    }\n\n                    var graph = {\n                        'matrix': matrix,\n                        'matrixpositions': matrixpositions,\n                        'across': !across,\n                        'word': '(unmatched)',\n                    };\n\n                    return graph;\n                }\n\n                /*\n                    insertLetterAtStringPosition(letter, string, position)\n                    Arrays are immutable within JavaScript.\n                    So, this method allows us to edit strings by\n                    inserting letters at positions.\n\n                */\n\n                function insertLetterAtStringPosition(letter, string, position) {\n                    if (!letter) {\n                        letter = ' ';\n                    }\n                    return string.substr(0, position) + letter + string.substr(position + 1);\n                }\n\n                /* setLetterMatrixHorizontally(matrix, word, y, x)\n\n                    Build a graph from a group of words horizontally.\n\n                */\n\n                function setLetterMatrixHorizontally(matrix, word, y, x) {\n                    for (var i = 0; i < word.length; i++) {\n                        var position = i + x;\n                        if (!matrix[y]) {\n                            matrix[y] = '';\n                        }\n                        var letters = matrix[y];\n\n                        if (letters.length < position) {\n                            while (letters.length < position) {\n                                letters += ' ';\n                            }\n                            letters += word[i];\n                        } else {\n                            letters = insertLetterAtStringPosition(word[i], letters, position);\n                        }\n\n                        matrix[y] = letters;\n                    }\n                    return matrix;\n                }\n\n                /* setLetterMatrixVertically(matrix, word, y, x)\n\n                    Build a group from a group of words vertically.\n\n                */\n\n                function setLetterMatrixVertically(matrix, word, y, x) {\n                    for (var i = 0; i < word.length; i++) {\n                        var position = i + y;\n                        if (!matrix[position]) {\n                            matrix[position] = '';\n                        }\n                        var letters = matrix[position];\n\n                        if (letters.length < x) {\n                            while (letters.length < x) {\n                                letters += ' ';\n                            }\n\n                            letters += word[i];\n                        } else {\n                            letters = insertLetterAtStringPosition(word[i], letters, x);\n                        }\n\n                        matrix[position] = letters;\n                    }\n                    return matrix;\n                }\n\n                /* findMatchingOffset(word, letter)\n\n                    Find the position of a letter in a word.\n\n                */\n\n                function findMatchingOffset(word, letter) {\n                    for (var i = 0; i < word.length; i++) {\n                        if (word[i] == letter) {\n                            return i;\n                        }\n                    }\n                    return false;\n                }\n\n                /* findMatchingLetterMatrixPositionVertical(matrix, word, subletter, index)\n\n                    Find the vertical position of a letter.\n\n                */\n\n                function findMatchingLetterMatrixPositionVertical(matrix, word, subletter, index) {\n                    for (var i = 0; i < word.length; i++) {\n                        var letter = word[i];\n                        if (!matrix[i]) {\n                            matrix[i] = '';\n                        }\n\n                        if (\n                            subletter == letter && (!matrix[i][index]\n                                || matrix[i][index] == ' ') && (!matrix[i][index + 2]\n                                || matrix[i][index + 2] == ' ')\n                        )\n                        {\n                            return i;\n                        }\n                    }\n                    return false;\n                }\n\n                /* findMatchingLetterMatrixPosition(matrix, word, subletter, index)\n\n                    Find the horizontal position of a letter.\n\n                */\n\n                function findMatchingLetterMatrixPosition(matrix, word, subletter, index) {\n                    for (var i = 0; i < word.length; i++) {\n                        var letter = word[i];\n                        if (!matrix[index]) {\n                            matrix[index] = '';\n                        }\n                        if (\n                            subletter == letter && (!matrix[index][i]\n                                || matrix[index][i] == ' ') && (!matrix[index + 2]\n                                || !matrix[index + 2][i]\n                                || matrix[index + 2][i] == ' '\n                            )\n                        ) {\n                            return i;\n                        }\n                    }\n                    return false;\n                }\n\n                /* fillLetterMatrixVertically(matrix, word, index)\n\n                    Fill a matrix with the appropriate amount of\n                    white space to make it into a perfect rectangular block.\n\n                */\n\n                function fillLetterMatrixVertically(matrix, word, index) {\n                    var spacing = Array(index).join(\" \");\n                    for (var i = 0; i < word.length; i++) {\n                        matrix[i] = spacing + word[i];\n                    }\n                    return matrix;\n                }\n\n                // /* buildUnmatchedBlock(unmatchedblock)\n                //\n                //     Compose the unmatched block. Since nothing\n                //     matches, there's nothing to build here.\n                //\n                // */\n                //\n                // function buildUnmatchedBlock(unmatchedblock) {\n                //     return unmatchedblock;\n                // }\n\n                /* getLongestWordLength(words)\n\n                    Get the length of the longest word.\n\n                */\n\n                function getLongestWordLength(words) {\n                    var length = 0;\n\n                    for (var i = 0; i < words.length; i++) {\n                        var word = words[i];\n                        var wordlength = word[0].length;\n                        if (wordlength > length) {\n                            length = wordlength;\n                        }\n                    }\n\n                    return length;\n                }\n\n                /* compactCrosswordBlockSources(graphs)\n\n                    Compact the graphs that will be used to make the\n                    full crossword puzzle graph.\n\n                */\n\n                function compactCrosswordBlockSources(graphs) {\n                    for (var i = 0; i < graphs.length; i++) {\n                        var graph = graphs[i];\n\n                        var matrix = graph['matrix'];\n\n                        graph = compactCrosswordBlockSource(graph);\n\n                        graphs[i] = graph;\n                    }\n                    return graphs;\n                }\n\n                /* compactCrosswordBlockSource(graph)\n\n                    Compact a single crossword block source graph.\n\n                */\n\n                function compactCrosswordBlockSource(graph) {\n                    graph = compactCrosswordBlockBottom(graph);\n                    graph = compactCrosswordBlockTop(graph);\n                    graph = compactCrosswordBlockLeft(graph);\n                    graph = compactCrosswordBlockRight(graph);\n                    return graph;\n                }\n\n                /**\n                 * compactCrosswordBlockTop(graph)\n                 * Compact the crossword block from the top.\n                 * @param graph\n                 * @returns {*}\n                 */\n\n                function compactCrosswordBlockTop(graph) {\n                    var crosswordblock = graph['matrix'];\n                    var crosswordblocksolutions = graph['matrixpositions'];\n                    var crosswordblockacross = graph['across'];\n\n                    var crosswordblocklength = crosswordblock.length;\n\n                    for (var i = 0; i < crosswordblocklength; i++) {\n                        var row = crosswordblock[i];\n                        var trimmedrow = $.trim(row);\n                        if (!row || !trimmedrow.length) {\n                            crosswordblock.splice(i, 1);\n                            crosswordblocksolutions = incrementCrossWordBlockHeights(crosswordblocksolutions);\n                            i--;\n                            crosswordblocklength--;\n                        } else {\n                            i = crosswordblocklength;\n                        }\n                    }\n\n                    graph['matrix'] = crosswordblock;\n                    graph['matrixpositions'] = crosswordblocksolutions;\n\n                    return graph;\n                }\n\n                /* incrementCrossWordBlockHeights(crosswordblocksolutions)\n\n                    Increase the vertical position of the words in a crossword block by one.\n\n                */\n\n                function incrementCrossWordBlockHeights(crosswordblocksolutions) {\n                    if (!crosswordblocksolutions) {\n                        return crosswordblocksolutions;\n                    }\n\n                    var crosswordblockwords = Object.keys(crosswordblocksolutions);\n                    for (var i = 0; i < crosswordblockwords.length; i++) {\n                        var crosswordblockword = crosswordblockwords[i];\n\n                        crosswordblocksolutions[crosswordblockword][0]--;\n                    }\n                    return crosswordblocksolutions;\n                }\n\n                /* incrementCrossWordBlockLengths(crosswordblocksolutions)\n\n                    Increase the horizontal position of the words in a crossword block by one.\n\n                */\n\n                function incrementCrossWordBlockLengths(crosswordblocksolutions) {\n                    if (!crosswordblocksolutions) {\n                        return crosswordblocksolutions;\n                    }\n\n                    var crosswordblockwords = Object.keys(crosswordblocksolutions);\n                    for (var i = 0; i < crosswordblockwords.length; i++) {\n                        var crosswordblockword = crosswordblockwords[i];\n\n                        crosswordblocksolutions[crosswordblockword][1]--;\n                    }\n                    return crosswordblocksolutions;\n                }\n\n                /* compactCrosswordBlockBottom(graph)\n\n                    Compact a crossword block on the bottom.\n\n                */\n\n                function compactCrosswordBlockBottom(graph) {\n                    var crosswordblock = graph['matrix'];\n                    var crosswordblocksolutions = graph['matrixpositions'];\n                    var crosswordblockacross = graph['across'];\n\n                    var crosswordblocklength = crosswordblock.length;\n                    for (var i = crosswordblocklength - 1; i >= 0; i--) {\n                        var row = crosswordblock[i];\n                        var trimmedrow = $.trim(row);\n                        if (!trimmedrow.length) {\n                            crosswordblock.splice(i, 1);\n                        } else {\n                            i = -1;\n                        }\n                    }\n\n                    graph['matrix'] = crosswordblock;\n                    graph['matrixpositions'] = crosswordblocksolutions;\n\n                    return graph;\n                }\n\n                /* compactCrosswordBlockLeft(graph)\n\n                    Compact a crossword block on the left.\n\n                */\n\n                function compactCrosswordBlockLeft(graph) {\n                    var crosswordblock = graph['matrix'];\n                    var crosswordblocksolutions = graph['matrixpositions'];\n                    var crosswordblockacross = graph['across'];\n\n                    var crosswordblocklength = crosswordblock.length;\n\n                    var shorten = true;\n\n                    while (shorten) {\n                        if (crosswordblocklength) {\n                            for (var i = 0; i < crosswordblocklength; i++) {\n                                if (crosswordblock[i]) {\n                                    var crosswordrow = crosswordblock[i];\n                                    if (crosswordrow && crosswordrow[0] && crosswordrow[0] != ' ') {\n                                        shorten = false;\n                                        i = crosswordblocklength;\n                                    }\n                                }\n                            }\n                        } else {\n                            shorten = false;\n                        }\n\n                        if (shorten) {\n                            for (var i = 0; i < crosswordblocklength; i++) {\n                                var crosswordrow = crosswordblock[i];\n                                crosswordblock[i] = crosswordrow.substr(1, crosswordrow.length);\n                            }\n\n                            crosswordblocksolutions = incrementCrossWordBlockLengths(crosswordblocksolutions);\n                        }\n                    }\n\n                    graph['matrix'] = crosswordblock;\n                    graph['matrixpositions'] = crosswordblocksolutions;\n\n                    return graph;\n                }\n\n                /* compactCrosswordBlockRight(graph)\n\n                    Compact a crossword block on the right.\n\n                */\n\n                function compactCrosswordBlockRight(graph) {\n                    var crosswordblock = graph['matrix'];\n                    var crosswordblocksolutions = graph['matrixpositions'];\n                    var crosswordblockacross = graph['across'];\n\n                    var longestpiece = getWidestLine(crosswordblock) - 1;\n                    var crosswordblocklength = crosswordblock.length;\n\n                    var shorten = true;\n\n                    while (shorten) {\n                        if (crosswordblocklength) {\n                            for (var i = 0; i < crosswordblocklength; i++) {\n                                if (crosswordblock[i]) {\n                                    var crosswordrow = crosswordblock[i];\n                                    if (crosswordrow[longestpiece] && crosswordrow[longestpiece] != ' ') {\n                                        shorten = false;\n                                        i = crosswordblocklength;\n                                    }\n                                }\n                            }\n                        } else {\n                            shorten = false;\n                        }\n                        if (shorten) {\n                            longestpiece--;\n                            for (var i = 0; i < crosswordblocklength; i++) {\n                                var crosswordrow = crosswordblock[i];\n                                crosswordblock[i] = crosswordrow.substr(0, crosswordrow.length - 1);\n                            }\n                        }\n                    }\n\n                    graph['matrix'] = crosswordblock;\n                    graph['matrixpositions'] = crosswordblocksolutions;\n\n                    return graph;\n                }\n\n                /* generateCrosswordBlockSources(shuffledwords)\n\n                    Make the crossword block sources, which are the\n                    sub-graphs or mini-graphs. These will be put together\n                    to make the full crossword puzzle.\n\n                */\n\n                function generateCrosswordBlockSources(shuffledwords) {\n                    var crosswordblocks = [];\n                    var checkedcrosswords = [];\n                    var clues = [];\n                    var fildnames = [];\n\n                    for (var i = 0; i < shuffledwords.length; i++) {\n                        var shuffledword = shuffledwords[i];\n                        var word = shuffledword[0].toLowerCase();\n                        var clue = shuffledword[1];\n                        clues[word] = clue;\n                        var fildname = shuffledword[2];\n                        fildnames[word] = fildname;\n\n                        crosswordclues[word] = clue;\n\n                        var checkedcrosswordkey = word + '-' + clue;\n\n                        var unmatchedwords = [];\n\n                        if (!checkedcrosswords[checkedcrosswordkey]) {\n                            var wordletters = getLettersHashCountForWord(word);\n                            var crosswordblock = [];\n\n                            for (var j = i + 1; j < shuffledwords.length; j++) {\n                                var nextshuffledword = shuffledwords[j];\n\n                                var nextword = nextshuffledword[0].toLowerCase();\n                                var nextclue = nextshuffledword[1];\n                                var nextcrosswordkey = nextword + '-' + nextclue;\n\n                                if (!checkedcrosswords[nextcrosswordkey]) {\n                                    var matchingletter = getMatchingLetter(wordletters, nextword);\n                                    if (matchingletter && matchingletter.length) {\n                                        wordletters[matchingletter]--;\n                                        checkedcrosswords[nextcrosswordkey] = true;\n                                        crosswordblock.push([nextword, matchingletter]);\n                                    }\n                                }\n                            }\n\n                            if (crosswordblock.length) {\n                                crosswordblocks[word] = crosswordblock;\n                            } else {\n                                unmatchedwords.push(word);\n                            }\n                            checkedcrosswords[checkedcrosswordkey] = true;\n                        }\n\n                        if (unmatchedwords.length) {\n                            crosswordblocks['(unmatched)'] = unmatchedwords;\n                        }\n                    }\n\n                    return {\n                        'blocks': crosswordblocks,\n                        'clues': clues,\n                        'fildnames': fildnames\n                    };\n                }\n\n                /* getLettersHashPositionsForWord(word)\n\n                    Get a hash of the letters and the positions of the letters of a word.\n\n                */\n\n                function getLettersHashPositionsForWord(word) {\n                    var lettershash = [];\n\n                    for (var i = 0; i < word.length; i++) {\n                        var letter = word[i];\n                        if (lettershash[letter]) {\n                            lettershash[letter].push(i);\n                        } else {\n                            lettershash[letter] = [i];\n                        }\n                    }\n\n                    return lettershash;\n                }\n\n                /* getLettersHashCountForWord(word)\n\n                    Get a hash of the counts for the letters of a word.\n\n                */\n\n                function getLettersHashCountForWord(word) {\n                    var lettershash = [];\n\n                    for (var i = 0; i < word.length; i++) {\n                        var letter = word[i];\n                        if (lettershash[letter]) {\n                            lettershash[letter]++;\n                        } else {\n                            lettershash[letter] = 1;\n                        }\n                    }\n\n                    return lettershash;\n                }\n\n                /* getMatchingLetter(letters, nextword)\n\n                    Get the matching letter between two overlapping words.\n\n                */\n\n                function getMatchingLetter(letters, nextword) {\n                    var matchingletter = '';\n\n                    for (var i = 0; i < nextword.length; i++) {\n                        var letter = nextword[i];\n                        if (letters[letter]) {\n                            return letter;\n                        }\n                    }\n\n                    return matchingletter;\n                }\n\n                /* shuffle(array)\n\n                    Randomize array.\n\n                */\n\n                // function shuffle(array) {\n                //     var currentIndex = array.length, temporaryValue, randomIndex;\n                //\n                //     while (0 !== currentIndex) {\n                //         randomIndex = Math.floor(Math.random() * currentIndex);\n                //         currentIndex -= 1;\n                //\n                //         temporaryValue = array[currentIndex];\n                //         array[currentIndex] = array[randomIndex];\n                //         array[randomIndex] = temporaryValue;\n                //     }\n                //\n                //     return array;\n                // }\n\n                function onBlurFuntion(data, x, y, across) {\n\n                    var answer = data.toLowerCase();\n\n                    if (answer) {\n                        var across = across;\n\n                        var x = parseInt(x, 10);\n                        var y = parseInt(y, 10);\n\n                        if (across && across != 'false') {\n                            for (var i = 0; i < answer.length; i++) {\n                                var newheight = y + i;\n                                var letterposition = 'letter-position-' + x + '-' + newheight;\n                                $('#' + letterposition).text(answer[i]);\n                            }\n                        } else {\n                            for (var i = 0; i < answer.length; i++) {\n                                var newwidth = x + i;\n                                var letterposition = 'letter-position-' + newwidth + '-' + y;\n                                $('#' + letterposition).text(answer[i]);\n                            }\n                        }\n\n                        // $('#' + word + '-listing').addClass('strikeout');\n                        // $('#' + word + '-listing').attr('data-solved', true);\n\n                        $('#answer-form').hide();\n                    } else {\n                        if (!$('#answer-results').is(':visible')) {\n                            $('#answer-results').show();\n                            $('#answer-results').html('Incorrect Answer, Please Try Again');\n                        }\n                    }\n\n                    return false;\n                }\n\n                crosswordPuzzle(JSON.parse(puzzlewords));\n            }\n        };\n    });\n"],"file":"crossword.min.js"}